Original theorm:

Theorem WP_parameter_def : forall (m:integer) (n:integer),
  ((0%Z <= (to_int m))%Z /\ ((to_int n) < 0%Z)%Z) ->
  ((((to_int m) < 0%Z)%Z -> let o := ((to_int n) - 1%Z)%Z in ((in_range o) /\
  forall (o1:integer), ((to_int o1) = o) -> forall (n1:integer), (n1 = o1) ->
  let o2 := ((to_int m) + 1%Z)%Z in ((in_range o2) /\ forall (o3:integer),
  ((to_int o3) = o2) -> forall (m1:integer), (m1 = o3) -> ((in_range
  ((to_int m) + 1%Z)%Z) /\ ((to_int m1) = ((to_int m) + 1%Z)%Z))))) /\
  ((~ ((to_int m) < 0%Z)%Z) -> let o := ((to_int n) + 1%Z)%Z in ((in_range
  o) /\ forall (o1:integer), ((to_int o1) = o) -> forall (n1:integer),
  (n1 = o1) -> let o2 := ((to_int m) - 1%Z)%Z in ((in_range o2) /\
  forall (o3:integer), ((to_int o3) = o2) -> forall (m1:integer),
  (m1 = o3) -> ((in_range ((to_int m) + 1%Z)%Z) /\
  ((to_int m1) = ((to_int m) + 1%Z)%Z)))))).
intros m n (h1,h2).


Omitting to_int, %Z

Theorem WP_parameter_def : forall (m:integer) (n:integer),
  ((0 <= m) /\ (n < 0)) ->
  (((m < 0) -> let o := (n - 1) in ((in_range o) /\
  forall (o1:integer), (o1 = o) -> forall (n1:integer), (n1 = o1) ->
  let o2 := (m + 1) in ((in_range o2) /\ forall (o3:integer),
  (o3 = o2) -> forall (m1:integer), (m1 = o3) -> ((in_range
  (m + 1)) /\ (m1 = (m + 1)))))) /\
  ((~ (m < 0)) -> let o := (n + 1) in ((in_range
  o) /\ forall (o1:integer), (o1 = o) -> forall (n1:integer),
  (n1 = o1) -> let o2 := (m - 1) in ((in_range o2) /\
  forall (o3:integer), (o3 = o2) -> forall (m1:integer),
  (m1 = o3) -> ((in_range (m + 1)) /\
  (m1 = (m + 1))))))).


aligning nicely 

forall (m:integer) (n:integer),
  ((0 <= m) /\ (n < 0)) ->
   (((m < 0) -> let o := (n - 1) in 
        ((in_range o) /\
         forall (o1:integer), (o1 = o) 
         -> forall (n1:integer), (n1 = o1) 
            ->  let o2 := (m + 1) in 
                ((in_range o2) /\ 
                 forall (o3:integer), (o3 = o2) 
                 -> forall (m1:integer), (m1 = o3) 
                    -> ((in_range  (m + 1)) /\ (m1 = (m + 1)))))) /\
  ((~ (m < 0)) -> let o := (n + 1) in 
      ((in_range  o) /\ 
      forall (o1:integer), (o1 = o) 
      -> forall (n1:integer),  (n1 = o1) 
         -> let o2 := (m - 1) in 
            ((in_range o2) /\
            forall (o3:integer), (o3 = o2) 
            -> forall (m1:integer),  (m1 = o3) 
               -> ((in_range (m + 1)) /\  (m1 = (m + 1))))))).


Replacing forall (o1:integer) (o1 = o) ->
  by replacing everywhere o1 by o etc

forall (m:integer) (n:integer),
  ((0 <= m) /\ (n < 0)) ->
   (((m < 0) -> let o := (n - 1) in 
        ((in_range o) /\
         let o2 := (m + 1) in 
          ((in_range o2) /\ 
          ((in_range  (m + 1)) /\ 
           (o2 = (m + 1)))))) /\
  ((~ (m < 0)) -> let o := (n + 1) in 
      ((in_range  o) /\ 
        let o2 := (m - 1) in 
            ((in_range o2) /\
             ((in_range (m + 1)) /\  (o2 = (m + 1))))))).




Omitting brackets. 
replacign ~ by ¬
since all variables range over integers omit their types:

forall m,n.
  (0 <= m /\ n < 0) ->
   (m < 0 -> let o := (n - 1) in 
        ((in_range o) /\
         let o2 := (m + 1) in 
          ((in_range o2) /\ (in_range  (m + 1) /\ (o2 = (m + 1)))))) /\
   (¬ (m < 0) -> let o := (n + 1) in 
      ((in_range  o) /\ 
        let o2 := (m - 1) in 
            ((in_range o2) /\(in_range (m + 1) /\  (o2 = (m + 1))))))


Split into two conditions:

0 <= m
n < 0
m < 0
o := n+1
o2 := m-1
--------------
in_range o2
in_range (m+1)
o2 = m+1



0 <= m
n < 0
¬ (m < 0)
o := n-1
o2 := m + 1
--------------
in_range o2
in_range (m+1)
o2 = m+1



