theory Task
  type int
  
  type real
  
  predicate (=) 'a 'a
  
  (* use why3.BuiltIn.BuiltIn *)
  
  type bool =
    | True
    | False
  
  (* use why3.Bool.Bool *)
  
  type tuple0 =
    | Tuple0
  
  (* use why3.Tuple0.Tuple01 *)
  
  type unit = ()
  
  (* use why3.Unit.Unit *)
  
  type qtmark
  
  (* use why3.Mark.Mark *)
  
  (* use why3.Prelude.Prelude *)
  
  constant zero : int = 0
  
  constant one : int = 1
  
  predicate (<) int int
  
  predicate (>) (x:int) (y:int) = y < x
  
  predicate (<=) (x:int) (y:int) = x < y \/ x = y
  
  function (+) int int : int
  
  function (-) int : int
  
  function (*) int int : int
  
  axiom Assoc : forall x:int, y:int, z:int. ((x + y) + z) = (x + (y + z))
  
  (* clone algebra.Assoc with type t = int, function op = (+),
    prop Assoc1 = Assoc *)
  
  axiom Unit_def_l : forall x:int. (zero + x) = x
  
  axiom Unit_def_r : forall x:int. (x + zero) = x
  
  (* clone algebra.Monoid with type t1 = int, constant unit = zero,
    function op1 = (+), prop Unit_def_r1 = Unit_def_r,
    prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)
  
  axiom Inv_def_l : forall x:int. ((- x) + x) = zero
  
  axiom Inv_def_r : forall x:int. (x + (- x)) = zero
  
  (* clone algebra.Group with type t2 = int, function inv = (-),
    constant unit1 = zero, function op2 = (+), prop Inv_def_r1 = Inv_def_r,
    prop Inv_def_l1 = Inv_def_l, prop Unit_def_r2 = Unit_def_r,
    prop Unit_def_l2 = Unit_def_l, prop Assoc3 = Assoc *)
  
  axiom Comm : forall x:int, y:int. (x + y) = (y + x)
  
  (* clone algebra.Comm with type t3 = int, function op3 = (+),
    prop Comm1 = Comm *)
  
  (* meta AC function (+) *)
  
  (* clone algebra.CommutativeGroup with type t4 = int, function inv1 = (-),
    constant unit2 = zero, function op4 = (+), prop Comm2 = Comm,
    prop Inv_def_r2 = Inv_def_r, prop Inv_def_l2 = Inv_def_l,
    prop Unit_def_r3 = Unit_def_r, prop Unit_def_l3 = Unit_def_l,
    prop Assoc4 = Assoc *)
  
  axiom Assoc5 : forall x:int, y:int, z:int. ((x * y) * z) = (x * (y * z))
  
  (* clone algebra.Assoc with type t = int, function op = (*),
    prop Assoc1 = Assoc5 *)
  
  axiom Mul_distr_l :
    forall x:int, y:int, z:int. (x * (y + z)) = ((x * y) + (x * z))
  
  axiom Mul_distr_r :
    forall x:int, y:int, z:int. ((y + z) * x) = ((y * x) + (z * x))
  
  function (-) (x:int) (y:int) : int = x + (- y)
  
  (* clone algebra.Ring with type t5 = int, function (-) = (-),
    function (*) = (*), function (-) = (-), function (+) = (+),
    constant zero1 = zero, prop Mul_distr_r1 = Mul_distr_r,
    prop Mul_distr_l1 = Mul_distr_l, prop Assoc6 = Assoc5, prop Comm3 = Comm,
    prop Inv_def_r3 = Inv_def_r, prop Inv_def_l3 = Inv_def_l,
    prop Unit_def_r4 = Unit_def_r, prop Unit_def_l4 = Unit_def_l,
    prop Assoc7 = Assoc *)
  
  axiom Comm4 : forall x:int, y:int. (x * y) = (y * x)
  
  (* clone algebra.Comm with type t3 = int, function op3 = (*),
    prop Comm1 = Comm4 *)
  
  (* meta AC function (*) *)
  
  (* clone algebra.CommutativeRing with type t6 = int, function (-) = (-),
    function (*) = (*), function (-) = (-), function (+) = (+),
    constant zero2 = zero, prop Comm5 = Comm4,
    prop Mul_distr_r2 = Mul_distr_r, prop Mul_distr_l2 = Mul_distr_l,
    prop Assoc8 = Assoc5, prop Comm6 = Comm, prop Inv_def_r4 = Inv_def_r,
    prop Inv_def_l4 = Inv_def_l, prop Unit_def_r5 = Unit_def_r,
    prop Unit_def_l5 = Unit_def_l, prop Assoc9 = Assoc *)
  
  axiom Unitary : forall x:int. (one * x) = x
  
  axiom NonTrivialRing : not zero = one
  
  (* clone algebra.UnitaryCommutativeRing with type t7 = int,
    constant one1 = one, function (-) = (-), function (*) = (*),
    function (-) = (-), function (+) = (+), constant zero3 = zero,
    prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
    prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
    prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5,
    prop Comm8 = Comm, prop Inv_def_r5 = Inv_def_r,
    prop Inv_def_l5 = Inv_def_l, prop Unit_def_r6 = Unit_def_r,
    prop Unit_def_l6 = Unit_def_l, prop Assoc11 = Assoc *)
  
  predicate (>=) (x:int) (y:int) = y <= x
  
  (* clone relations.EndoRelation with type t8 = int, predicate rel = (<=),
     *)
  
  axiom Refl : forall x:int. x <= x
  
  (* clone relations.Reflexive with type t9 = int, predicate rel1 = (<=),
    prop Refl1 = Refl *)
  
  (* clone relations.EndoRelation with type t8 = int, predicate rel = (<=),
     *)
  
  axiom Trans : forall x:int, y:int, z:int. x <= y -> y <= z -> x <= z
  
  (* clone relations.Transitive with type t10 = int, predicate rel2 = (<=),
    prop Trans1 = Trans *)
  
  (* clone relations.PreOrder with type t11 = int, predicate rel3 = (<=),
    prop Trans2 = Trans, prop Refl2 = Refl *)
  
  (* clone relations.EndoRelation with type t8 = int, predicate rel = (<=),
     *)
  
  axiom Antisymm : forall x:int, y:int. x <= y -> y <= x -> x = y
  
  (* clone relations.Antisymmetric with type t12 = int,
    predicate rel4 = (<=), prop Antisymm1 = Antisymm *)
  
  (* clone relations.PartialOrder with type t13 = int, predicate rel5 = (<=),
    prop Antisymm2 = Antisymm, prop Trans3 = Trans, prop Refl3 = Refl *)
  
  (* clone relations.EndoRelation with type t8 = int, predicate rel = (<=),
     *)
  
  axiom Total : forall x:int, y:int. x <= y \/ y <= x
  
  (* clone relations.Total with type t14 = int, predicate rel6 = (<=),
    prop Total1 = Total *)
  
  (* clone relations.TotalOrder with type t15 = int, predicate rel7 = (<=),
    prop Total2 = Total, prop Antisymm3 = Antisymm, prop Trans4 = Trans,
    prop Refl4 = Refl *)
  
  axiom ZeroLessOne : zero <= one
  
  axiom CompatOrderAdd :
    forall x:int, y:int, z:int. x <= y -> (x + z) <= (y + z)
  
  axiom CompatOrderMult :
    forall x:int, y:int, z:int. x <= y -> zero <= z -> (x * z) <= (y * z)
  
  (* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
    predicate (>=) = (>=), predicate (<=) = (<=), constant one2 = one,
    function (-) = (-), function (*) = (*), function (-) = (-),
    function (+) = (+), constant zero4 = zero,
    prop CompatOrderMult1 = CompatOrderMult,
    prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
    prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
    prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
    prop Unitary2 = Unitary, prop Comm9 = Comm4,
    prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
    prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
    prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
    prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)
  
  (* use int.Int *)
  
  type ref 'a =
    | Mk_ref (contents:'a)
  
  function (!) (x:ref 'a) : 'a = contents x
  
  (* use ref.Ref *)
  
  function andb (x:bool) (y:bool) : bool =
    match x with
    | True -> y
    | False -> False
    end
  
  function orb (x:bool) (y:bool) : bool =
    match x with
    | False -> y
    | True -> True
    end
  
  type tuple2 'a 'a1 =
    | Tuple2 'a 'a1
  
  (* use why3.Tuple2.Tuple21 *)
  
  function xorb (x:bool) (y:bool) : bool =
    match (x, y) with
    | True, False -> True
    | False, True -> True
    | _, _ -> False
    end
  
  function notb (x:bool) : bool =
    match x with
    | False -> True
    | True -> False
    end
  
  function implb (x:bool) (y:bool) : bool =
    match (x, y) with
    | True, False -> False
    | _, _ -> True
    end
  
  (* use bool.Bool1 *)
  
  function us__ignore 'a : ()
  
  type us_private
  
  type us_fixed = int
  
  (* use _gnatprove_standard_th.Main_Main *)
  
  type us_type_of_heap
  
  type us_image
  
  predicate us_ignore (x:'a) = true
  
  (* use _gnatprove_standard.Main *)
  
  function abs (x:int) : int = if x >= 0 then x else - x
  
  axiom Abs_le : forall x:int, y:int. abs x <= y <-> (- y) <= x /\ x <= y
  
  axiom Abs_pos : forall x:int. abs x >= 0
  
  (* use int.Abs *)
  
  (* clone algebra.Assoc with type t = int, function op = (*),
    prop Assoc1 = Assoc14 *)
  
  (* clone algebra.Monoid with type t1 = int, constant unit = one,
    function op1 = (*), prop Unit_def_r1 = Unit_def_r8,
    prop Unit_def_l1 = Unit_def_l8, prop Assoc2 = Assoc14 *)
  
  (* clone algebra.Comm with type t3 = int, function op3 = (*),
    prop Comm1 = Comm11 *)
  
  (* meta AC function (*) *)
  
  (* clone algebra.CommutativeMonoid with type t17 = int,
    constant unit3 = one, function op5 = (*), prop Comm12 = Comm11,
    prop Unit_def_r9 = Unit_def_r8, prop Unit_def_l9 = Unit_def_l8,
    prop Assoc15 = Assoc14 *)
  
  function power int int : int
  
  axiom Power_0 : forall x:int. power x 0 = one
  
  axiom Power_s :
    forall x:int, n:int. n >= 0 -> power x (n + 1) = (x * power x n)
  
  axiom Power_s_alt :
    forall x:int, n:int. n > 0 -> power x n = (x * power x (n - 1))
  
  axiom Power_1 : forall x:int. power x 1 = x
  
  axiom Power_sum :
    forall x:int, n:int, m:int.
     0 <= n -> 0 <= m -> power x (n + m) = (power x n * power x m)
  
  axiom Power_mult :
    forall x:int, n:int, m:int.
     0 <= n -> 0 <= m -> power x (n * m) = power (power x n) m
  
  axiom Power_mult2 :
    forall x:int, y:int, n:int.
     0 <= n -> power (x * y) n = (power x n * power y n)
  
  (* clone int.Exponentiation with type t18 = int, function power1 = power,
    function (*) = (*), constant one3 = one, prop Power_mult21 = Power_mult2,
    prop Power_mult1 = Power_mult, prop Power_sum1 = Power_sum,
    prop Power_11 = Power_1, prop Power_s_alt1 = Power_s_alt,
    prop Power_s1 = Power_s, prop Power_01 = Power_0, prop Comm13 = Comm11,
    prop Unit_def_r10 = Unit_def_r8, prop Unit_def_l10 = Unit_def_l8,
    prop Assoc16 = Assoc14 *)
  
  axiom Power_non_neg :
    forall x:int, y:int. x >= 0 /\ y >= 0 -> power x y >= 0
  
  axiom Power_monotonic :
    forall x:int, n:int, m:int.
     0 < x /\ 0 <= n /\ n <= m -> power x n <= power x m
  
  (* use int.Power *)
  
  (* clone relations.EndoRelation with type t8 = int, predicate rel = (<=),
     *)
  
  (* clone relations.Reflexive with type t9 = int, predicate rel1 = (<=),
    prop Refl1 = Refl6 *)
  
  (* clone relations.EndoRelation with type t8 = int, predicate rel = (<=),
     *)
  
  (* clone relations.Transitive with type t10 = int, predicate rel2 = (<=),
    prop Trans1 = Trans6 *)
  
  (* clone relations.PreOrder with type t11 = int, predicate rel3 = (<=),
    prop Trans2 = Trans6, prop Refl2 = Refl6 *)
  
  (* clone relations.EndoRelation with type t8 = int, predicate rel = (<=),
     *)
  
  (* clone relations.Antisymmetric with type t12 = int,
    predicate rel4 = (<=), prop Antisymm1 = Antisymm5 *)
  
  (* clone relations.PartialOrder with type t13 = int, predicate rel5 = (<=),
    prop Antisymm2 = Antisymm5, prop Trans3 = Trans6, prop Refl3 = Refl6 *)
  
  (* clone relations.EndoRelation with type t8 = int, predicate rel = (<=),
     *)
  
  (* clone relations.Total with type t14 = int, predicate rel6 = (<=),
    prop Total1 = Total4 *)
  
  (* clone relations.TotalOrder with type t15 = int, predicate rel7 = (<=),
    prop Total2 = Total4, prop Antisymm3 = Antisymm5, prop Trans4 = Trans6,
    prop Refl4 = Refl6 *)
  
  function min (x:int) (y:int) : int = if x <= y then x else y
  
  function max (x:int) (y:int) : int = if x <= y then y else x
  
  axiom Min_r : forall x:int, y:int. y <= x -> min x y = y
  
  axiom Max_l : forall x:int, y:int. y <= x -> max x y = x
  
  axiom Min_comm : forall x:int, y:int. min x y = min y x
  
  axiom Max_comm : forall x:int, y:int. max x y = max y x
  
  axiom Min_assoc :
    forall x:int, y:int, z:int. min (min x y) z = min x (min y z)
  
  axiom Max_assoc :
    forall x:int, y:int, z:int. max (max x y) z = max x (max y z)
  
  (* clone relations.MinMax with type t19 = int, function max1 = max,
    function min1 = min, predicate le = (<=), prop Max_assoc1 = Max_assoc,
    prop Min_assoc1 = Min_assoc, prop Max_comm1 = Max_comm,
    prop Min_comm1 = Min_comm, prop Max_l1 = Max_l, prop Min_r1 = Min_r,
    prop Total5 = Total4, prop Antisymm6 = Antisymm5, prop Trans7 = Trans6,
    prop Refl7 = Refl6 *)
  
  (* use int.MinMax1 *)
  
  function div int int : int
  
  function mod int int : int
  
  axiom Div_mod :
    forall x:int, y:int. not y = 0 -> x = ((y * div x y) + mod x y)
  
  axiom Div_bound :
    forall x:int, y:int. x >= 0 /\ y > 0 -> 0 <= div x y /\ div x y <= x
  
  axiom Mod_bound :
    forall x:int, y:int. not y = 0 -> (- abs y) < mod x y /\ mod x y < abs y
  
  axiom Div_sign_pos : forall x:int, y:int. x >= 0 /\ y > 0 -> div x y >= 0
  
  axiom Div_sign_neg : forall x:int, y:int. x <= 0 /\ y > 0 -> div x y <= 0
  
  axiom Mod_sign_pos :
    forall x:int, y:int. x >= 0 /\ not y = 0 -> mod x y >= 0
  
  axiom Mod_sign_neg :
    forall x:int, y:int. x <= 0 /\ not y = 0 -> mod x y <= 0
  
  axiom Rounds_toward_zero :
    forall x:int, y:int. not y = 0 -> abs (div x y * y) <= abs x
  
  axiom Div_1 : forall x:int. div x 1 = x
  
  axiom Mod_1 : forall x:int. mod x 1 = 0
  
  axiom Div_inf : forall x:int, y:int. 0 <= x /\ x < y -> div x y = 0
  
  axiom Mod_inf : forall x:int, y:int. 0 <= x /\ x < y -> mod x y = x
  
  axiom Div_mult :
    forall x:int, y:int, z:int [div ((x * y) + z) x].
     x > 0 /\ y >= 0 /\ z >= 0 -> div ((x * y) + z) x = (y + div z x)
  
  axiom Mod_mult :
    forall x:int, y:int, z:int [mod ((x * y) + z) x].
     x > 0 /\ y >= 0 /\ z >= 0 -> mod ((x * y) + z) x = mod z x
  
  (* use int.ComputerDivision *)
  
  function div1 int int : int
  
  function mod1 int int : int
  
  axiom Div_mod1 :
    forall x:int, y:int. not y = 0 -> x = ((y * div1 x y) + mod1 x y)
  
  axiom Div_bound1 :
    forall x:int, y:int. x >= 0 /\ y > 0 -> 0 <= div1 x y /\ div1 x y <= x
  
  axiom Mod_bound1 :
    forall x:int, y:int. not y = 0 -> 0 <= mod1 x y /\ mod1 x y < abs y
  
  axiom Mod_11 : forall x:int. mod1 x 1 = 0
  
  axiom Div_11 : forall x:int. div1 x 1 = x
  
  axiom Div_inf1 : forall x:int, y:int. 0 <= x /\ x < y -> div1 x y = 0
  
  axiom Div_inf_neg :
    forall x:int, y:int. 0 < x /\ x <= y -> div1 (- x) y = (- 1)
  
  axiom Mod_0 : forall y:int. not y = 0 -> mod1 0 y = 0
  
  axiom Div_1_left : forall y:int. y > 1 -> div1 1 y = 0
  
  axiom Div_minus1_left : forall y:int. y > 1 -> div1 (- 1) y = (- 1)
  
  axiom Mod_1_left : forall y:int. y > 1 -> mod1 1 y = 1
  
  axiom Mod_minus1_left : forall y:int. y > 1 -> mod1 (- 1) y = (y - 1)
  
  axiom Div_mult1 :
    forall x:int, y:int, z:int [div1 ((x * y) + z) x].
     x > 0 -> div1 ((x * y) + z) x = (y + div1 z x)
  
  axiom Mod_mult1 :
    forall x:int, y:int, z:int [mod1 ((x * y) + z) x].
     x > 0 -> mod1 ((x * y) + z) x = mod1 z x
  
  (* use int.EuclideanDivision *)
  
  function bool_eq int int : bool
  
  function bool_ne int int : bool
  
  function bool_lt int int : bool
  
  function bool_le int int : bool
  
  function bool_gt int int : bool
  
  function bool_ge int int : bool
  
  function int_max (x:int) (y:int) : int = max x y
  
  function int_min (x:int) (y:int) : int = min x y
  
  function div2 (x:int) (y:int) : int = div x y
  
  function rem (x:int) (y:int) : int = mod x y
  
  function mod2 (x:int) (y:int) : int = if y > 0 then mod1 x y
    else mod1 x y + y
  
  function math_mod (x:int) (y:int) : int = mod1 x y
  
  axiom bool_eq_axiom :
    forall x:int. forall y:int. bool_eq x y = True <-> x = y
  
  axiom bool_ne_axiom :
    forall x:int. forall y:int. bool_ne x y = True <-> not x = y
  
  axiom bool_lt_axiom :
    forall x:int. forall y:int. bool_lt x y = True <-> x < y
  
  axiom bool_int__le_axiom :
    forall x:int. forall y:int. bool_le x y = True <-> x <= y
  
  axiom bool_gt_axiom :
    forall x:int. forall y:int. bool_gt x y = True <-> x > y
  
  axiom bool_ge_axiom :
    forall x:int. forall y:int. bool_ge x y = True <-> x >= y
  
  (* use _gnatprove_standard_th.Integer_Func *)
  
  function bitwise_and int int : int
  
  function bitwise_or int int : int
  
  function bitwise_xor int int : int
  
  (* use _gnatprove_standard.Integer *)
  
  type one_signal_state
  
  constant first : int = 0
  
  constant last : int = 1
  
  predicate in_range (x:int) = first <= x /\ x <= last
  
  function bool_eq1 (x:int) (y:int) : bool = if x = y then True else False
  
  (* use ada__model_th.Discrete_Base_Theory *)
  
  function attr__ATTRIBUTE_IMAGE int : us_image
  
  predicate attr__ATTRIBUTE_VALUE__pre_check us_image
  
  function attr__ATTRIBUTE_VALUE us_image : int
  
  function to_int one_signal_state : int
  
  function of_int int : one_signal_state
  
  function user_eq one_signal_state one_signal_state : bool
  
  axiom inversion_axiom :
    forall x:one_signal_state [to_int x]. of_int (to_int x) = x
  
  constant dummy : one_signal_state
  
  (* clone ada__model.Discrete_Base with type t20 = one_signal_state,
    constant dummy1 = dummy, function user_eq1 = user_eq,
    function of_int1 = of_int, function to_int1 = to_int,
    function attr__ATTRIBUTE_VALUE1 = attr__ATTRIBUTE_VALUE,
    predicate attr__ATTRIBUTE_VALUE__pre_check1 = attr__ATTRIBUTE_VALUE__pre_check,
    function attr__ATTRIBUTE_IMAGE1 = attr__ATTRIBUTE_IMAGE,
    prop inversion_axiom1 = inversion_axiom *)
  
  axiom range_axiom : forall x:one_signal_state. in_range (to_int x)
  
  (* clone ada__model.Static_Discrete_Base with type t21 = one_signal_state,
    predicate in_range1 = in_range, constant last1 = last,
    constant first1 = first, constant dummy2 = dummy,
    function user_eq2 = user_eq, function of_int2 = of_int,
    function to_int2 = to_int,
    function attr__ATTRIBUTE_VALUE2 = attr__ATTRIBUTE_VALUE,
    predicate attr__ATTRIBUTE_VALUE__pre_check2 = attr__ATTRIBUTE_VALUE__pre_check,
    function attr__ATTRIBUTE_IMAGE2 = attr__ATTRIBUTE_IMAGE,
    prop range_axiom1 = range_axiom,
    prop inversion_axiom2 = inversion_axiom *)
  
  axiom coerce_axiom :
    forall x:int [to_int (of_int x)]. in_range x -> to_int (of_int x) = x
  
  (* clone ada__model.Static_Discrete with type t22 = one_signal_state,
    predicate in_range2 = in_range, constant last2 = last,
    constant first2 = first, constant dummy3 = dummy,
    function user_eq3 = user_eq, function of_int3 = of_int,
    function to_int3 = to_int,
    function attr__ATTRIBUTE_VALUE3 = attr__ATTRIBUTE_VALUE,
    predicate attr__ATTRIBUTE_VALUE__pre_check3 = attr__ATTRIBUTE_VALUE__pre_check,
    function attr__ATTRIBUTE_IMAGE3 = attr__ATTRIBUTE_IMAGE,
    prop coerce_axiom1 = coerce_axiom, prop range_axiom2 = range_axiom,
    prop inversion_axiom3 = inversion_axiom *)
  
  (* use Simple_railway__one_signal_state *)
  
  (* use Simple_railway__one_signal_state__axiom *)
  
  type route_type
  
  constant first3 : int = 0
  
  constant last3 : int = 7
  
  predicate in_range3 (x:int) = first3 <= x /\ x <= last3
  
  function attr__ATTRIBUTE_IMAGE4 int : us_image
  
  predicate attr__ATTRIBUTE_VALUE__pre_check4 us_image
  
  function attr__ATTRIBUTE_VALUE4 us_image : int
  
  function to_int4 route_type : int
  
  function of_int4 int : route_type
  
  function user_eq4 route_type route_type : bool
  
  axiom inversion_axiom4 :
    forall x:route_type [to_int4 x]. of_int4 (to_int4 x) = x
  
  constant dummy4 : route_type
  
  (* clone ada__model.Discrete_Base with type t20 = route_type,
    constant dummy1 = dummy4, function user_eq1 = user_eq4,
    function of_int1 = of_int4, function to_int1 = to_int4,
    function attr__ATTRIBUTE_VALUE1 = attr__ATTRIBUTE_VALUE4,
    predicate attr__ATTRIBUTE_VALUE__pre_check1 = attr__ATTRIBUTE_VALUE__pre_check4,
    function attr__ATTRIBUTE_IMAGE1 = attr__ATTRIBUTE_IMAGE4,
    prop inversion_axiom1 = inversion_axiom4 *)
  
  axiom range_axiom3 : forall x:route_type. in_range3 (to_int4 x)
  
  (* clone ada__model.Static_Discrete_Base with type t21 = route_type,
    predicate in_range1 = in_range3, constant last1 = last3,
    constant first1 = first3, constant dummy2 = dummy4,
    function user_eq2 = user_eq4, function of_int2 = of_int4,
    function to_int2 = to_int4,
    function attr__ATTRIBUTE_VALUE2 = attr__ATTRIBUTE_VALUE4,
    predicate attr__ATTRIBUTE_VALUE__pre_check2 = attr__ATTRIBUTE_VALUE__pre_check4,
    function attr__ATTRIBUTE_IMAGE2 = attr__ATTRIBUTE_IMAGE4,
    prop range_axiom1 = range_axiom3,
    prop inversion_axiom2 = inversion_axiom4 *)
  
  axiom coerce_axiom2 :
    forall x:int [to_int4 (of_int4 x)].
     in_range3 x -> to_int4 (of_int4 x) = x
  
  (* clone ada__model.Static_Discrete with type t22 = route_type,
    predicate in_range2 = in_range3, constant last2 = last3,
    constant first2 = first3, constant dummy3 = dummy4,
    function user_eq3 = user_eq4, function of_int3 = of_int4,
    function to_int3 = to_int4,
    function attr__ATTRIBUTE_VALUE3 = attr__ATTRIBUTE_VALUE4,
    predicate attr__ATTRIBUTE_VALUE__pre_check3 = attr__ATTRIBUTE_VALUE__pre_check4,
    function attr__ATTRIBUTE_IMAGE3 = attr__ATTRIBUTE_IMAGE4,
    prop coerce_axiom1 = coerce_axiom2, prop range_axiom2 = range_axiom3,
    prop inversion_axiom3 = inversion_axiom4 *)
  
  (* use Simple_railway__route_type *)
  
  (* use Simple_railway__route_type__axiom *)
  
  type one_segment_state
  
  constant first4 : int = 0
  
  constant last4 : int = 5
  
  predicate in_range4 (x:int) = first4 <= x /\ x <= last4
  
  function attr__ATTRIBUTE_IMAGE5 int : us_image
  
  predicate attr__ATTRIBUTE_VALUE__pre_check5 us_image
  
  function attr__ATTRIBUTE_VALUE5 us_image : int
  
  function to_int5 one_segment_state : int
  
  function of_int5 int : one_segment_state
  
  function user_eq5 one_segment_state one_segment_state : bool
  
  axiom inversion_axiom5 :
    forall x:one_segment_state [to_int5 x]. of_int5 (to_int5 x) = x
  
  constant dummy5 : one_segment_state
  
  (* clone ada__model.Discrete_Base with type t20 = one_segment_state,
    constant dummy1 = dummy5, function user_eq1 = user_eq5,
    function of_int1 = of_int5, function to_int1 = to_int5,
    function attr__ATTRIBUTE_VALUE1 = attr__ATTRIBUTE_VALUE5,
    predicate attr__ATTRIBUTE_VALUE__pre_check1 = attr__ATTRIBUTE_VALUE__pre_check5,
    function attr__ATTRIBUTE_IMAGE1 = attr__ATTRIBUTE_IMAGE5,
    prop inversion_axiom1 = inversion_axiom5 *)
  
  axiom range_axiom4 : forall x:one_segment_state. in_range4 (to_int5 x)
  
  (* clone ada__model.Static_Discrete_Base with type t21 = one_segment_state,
    predicate in_range1 = in_range4, constant last1 = last4,
    constant first1 = first4, constant dummy2 = dummy5,
    function user_eq2 = user_eq5, function of_int2 = of_int5,
    function to_int2 = to_int5,
    function attr__ATTRIBUTE_VALUE2 = attr__ATTRIBUTE_VALUE5,
    predicate attr__ATTRIBUTE_VALUE__pre_check2 = attr__ATTRIBUTE_VALUE__pre_check5,
    function attr__ATTRIBUTE_IMAGE2 = attr__ATTRIBUTE_IMAGE5,
    prop range_axiom1 = range_axiom4,
    prop inversion_axiom2 = inversion_axiom5 *)
  
  axiom coerce_axiom3 :
    forall x:int [to_int5 (of_int5 x)].
     in_range4 x -> to_int5 (of_int5 x) = x
  
  (* clone ada__model.Static_Discrete with type t22 = one_segment_state,
    predicate in_range2 = in_range4, constant last2 = last4,
    constant first2 = first4, constant dummy3 = dummy5,
    function user_eq3 = user_eq5, function of_int3 = of_int5,
    function to_int3 = to_int5,
    function attr__ATTRIBUTE_VALUE3 = attr__ATTRIBUTE_VALUE5,
    predicate attr__ATTRIBUTE_VALUE__pre_check3 = attr__ATTRIBUTE_VALUE__pre_check5,
    function attr__ATTRIBUTE_IMAGE3 = attr__ATTRIBUTE_IMAGE5,
    prop coerce_axiom1 = coerce_axiom3, prop range_axiom2 = range_axiom4,
    prop inversion_axiom3 = inversion_axiom5 *)
  
  (* use Simple_railway__one_segment_state *)
  
  (* use Simple_railway__one_segment_state__axiom *)
  
  type segment_state_type =
    | Mk_segment_state_type (rec__left:one_segment_state) (rec__middle:
        one_segment_state) (rec__right:one_segment_state)
  
  predicate left__pred (a:segment_state_type) = true
  
  predicate middle__pred (a:segment_state_type) = true
  
  predicate right__pred (a:segment_state_type) = true
  
  function bool_eq2 (a:segment_state_type) (b:segment_state_type) : bool =
    if (to_int5 (rec__left a) = to_int5 (rec__left b) /\
         to_int5 (rec__middle a) = to_int5 (rec__middle b)) /\
        to_int5 (rec__right a) = to_int5 (rec__right b) then True else False
  
  function user_eq6 segment_state_type segment_state_type : bool
  
  constant dummy6 : segment_state_type
  
  (* use Simple_railway__segment_state_type *)
  
  (* use Simple_railway__segment_state_type__axiom *)
  
  type signal_state_type =
    | Mk_signal_state_type (rec__leave_left:one_signal_state)
        (rec__enter_left:one_signal_state) (rec__left_middle:
        one_signal_state) (rec__middle_left:one_signal_state)
        (rec__middle_right:one_signal_state) (rec__right_middle:
        one_signal_state) (rec__leave_right:one_signal_state)
        (rec__enter_right:one_signal_state)
  
  predicate leave_left__pred (a:signal_state_type) = true
  
  predicate enter_left__pred (a:signal_state_type) = true
  
  predicate left_middle__pred (a:signal_state_type) = true
  
  predicate middle_left__pred (a:signal_state_type) = true
  
  predicate middle_right__pred (a:signal_state_type) = true
  
  predicate right_middle__pred (a:signal_state_type) = true
  
  predicate leave_right__pred (a:signal_state_type) = true
  
  predicate enter_right__pred (a:signal_state_type) = true
  
  function bool_eq3 (a:signal_state_type) (b:signal_state_type) : bool =
    if ((((((to_int (rec__leave_left a) = to_int (rec__leave_left b) /\
              to_int (rec__enter_left a) = to_int (rec__enter_left b)) /\
             to_int (rec__left_middle a) = to_int (rec__left_middle b)) /\
            to_int (rec__middle_left a) = to_int (rec__middle_left b)) /\
           to_int (rec__middle_right a) = to_int (rec__middle_right b)) /\
          to_int (rec__right_middle a) = to_int (rec__right_middle b)) /\
         to_int (rec__leave_right a) = to_int (rec__leave_right b)) /\
        to_int (rec__enter_right a) = to_int (rec__enter_right b) then True
    else False
  
  function user_eq7 signal_state_type signal_state_type : bool
  
  constant dummy7 : signal_state_type
  
  (* use Simple_railway__signal_state_type *)
  
  (* use Simple_railway__signal_state_type__axiom *)
  
  type t23 = segment_state_type
  
  (* use Simple_railway__segment_state *)
  
  (* use Simple_railway__segment_state__axiom *)
  
  type t24 = signal_state_type
  
  (* use Simple_railway__signal_state *)
  
  (* use Simple_railway__signal_state__axiom *)
  
  constant route : route_type
  
  (* use Simple_railway__open__route *)
  
  (* use Simple_railway__open__route__axiom *)
  
  function ite (b:bool) (x:'a) (y:'a) : 'a =
    match b with
    | True -> x
    | False -> y
    end
  
  (* use bool.Ite *)
  
  function bool_eq4 (x:bool) (y:bool) : bool = if x = y then True else False
  
  (* use _gnatprove_standard_th.Boolean_Func *)
  
  function to_int6 (b:bool) : int = if b = True then 1 else 0
  
  function of_int6 (i:int) : bool = if i = 0 then False else True
  
  constant last5 : int = 1
  
  constant first5 : int = 0
  
  predicate in_range5 (x:int) = x = 0 \/ x = 1
  
  function attr__ATTRIBUTE_IMAGE6 bool : us_image
  
  predicate attr__ATTRIBUTE_VALUE__pre_check6 us_image
  
  function attr__ATTRIBUTE_VALUE6 us_image : bool
  
  (* use _gnatprove_standard.Boolean *)
  
  type t25 = bool
  
  (* use Simple_railway__open__success *)
  
  (* use Simple_railway__open__success__axiom *)
  
  type t26 = one_segment_state
  
  (* use Simple_railway__open__local_segment_state_right *)
  
  (* use Simple_railway__open__local_segment_state_right__axiom *)
  
  constant signal_state : one_signal_state
  
  constant signal_state1 : one_signal_state
  
  constant signal_state2 : one_signal_state
  
  constant signal_state3 : one_signal_state
  
  constant signal_state4 : one_signal_state
  
  constant signal_state5 : one_signal_state
  
  constant signal_state6 : one_signal_state
  
  constant signal_state7 : one_signal_state
  
  constant segment_state : one_segment_state
  
  constant segment_state1 : one_segment_state
  
  constant segment_state2 : one_segment_state
  
  axiom H :
    to_int signal_state3 = 1 ->
     (((((((to_int5 segment_state = 4 /\ to_int5 segment_state1 = 1) /\
            (to_int signal_state4 = 1 ->
              to_int5 segment_state2 = 3 /\ to_int5 segment_state1 = 2)) /\
           (to_int signal_state2 = 1 ->
             to_int5 segment_state1 = 3 /\ to_int5 segment_state = 2)) /\
          (to_int signal_state5 = 1 ->
            to_int5 segment_state1 = 4 /\ to_int5 segment_state2 = 1)) /\
         (to_int signal_state = 1 -> to_int5 segment_state = 1)) /\
        (to_int signal_state1 = 1 -> to_int5 segment_state = 3)) /\
       (to_int signal_state6 = 1 -> to_int5 segment_state2 = 2)) /\
      (to_int signal_state1 = 1 -> to_int5 segment_state2 = 4)
  
  constant o : one_segment_state
  
  axiom H1 : to_int5 o = 3
  
  constant local_segment_state_right : one_segment_state
  
  axiom H2 : local_segment_state_right = o
  
  constant success : bool
  
  axiom H3 : success = of_int6 0
  
  goal WP_parameter_def :
    if to_int4 route = 0 then if to_int5 segment_state = 0 &&
                                  to_int5 segment_state1 = 5 then forall o1:
                                                                   one_segment_state.
                                                                   to_int5 o1 =
                                                                    2 ->
                                                                    (
                                                                    forall segment_state3:
                                                                    one_segment_state,
                                                                    segment_state4:
                                                                    one_segment_state,
                                                                    segment_state5:
                                                                    one_segment_state.
                                                                    segment_state3 =
                                                                    o1 /\
                                                                    segment_state4 =
                                                                    segment_state1 /\
                                                                    segment_state5 =
                                                                    segment_state2 ->
                                                                    (forall o2:
                                                                    one_segment_state.
                                                                    to_int5
                                                                    o2 = 3 ->
                                                                    (forall segment_state6:
                                                                    one_segment_state,
                                                                    segment_state7:
                                                                    one_segment_state,
                                                                    segment_state8:
                                                                    one_segment_state.
                                                                    segment_state6 =
                                                                    segment_state3 /\
                                                                    segment_state7 =
                                                                    o2 /\
                                                                    segment_state8 =
                                                                    segment_state5 ->
                                                                    (forall o3:
                                                                    one_signal_state.
                                                                    to_int o3 =
                                                                    1 ->
                                                                    (forall signal_state8:
                                                                    one_signal_state,
                                                                    signal_state9:
                                                                    one_signal_state,
                                                                    signal_state10:
                                                                    one_signal_state,
                                                                    signal_state11:
                                                                    one_signal_state,
                                                                    signal_state12:
                                                                    one_signal_state,
                                                                    signal_state13:
                                                                    one_signal_state,
                                                                    signal_state14:
                                                                    one_signal_state,
                                                                    signal_state15:
                                                                    one_signal_state.
                                                                    signal_state8 =
                                                                    signal_state /\
                                                                    signal_state9 =
                                                                    signal_state1 /\
                                                                    signal_state10 =
                                                                    o3 /\
                                                                    signal_state11 =
                                                                    signal_state3 /\
                                                                    signal_state12 =
                                                                    signal_state4 /\
                                                                    signal_state13 =
                                                                    signal_state5 /\
                                                                    signal_state14 =
                                                                    signal_state6 /\
                                                                    signal_state15 =
                                                                    signal_state7 ->
                                                                    (forall success1:
                                                                    bool.
                                                                    success1 =
                                                                    of_int6 1 ->
                                                                    ((((((((((to_int
                                                                    signal_state11 =
                                                                    1 ->
                                                                    to_int5
                                                                    segment_state6 =
                                                                    4 /\
                                                                    to_int5
                                                                    segment_state7 =
                                                                    1) /\
                                                                    (to_int
                                                                    signal_state12 =
                                                                    1 ->
                                                                    to_int5
                                                                    segment_state8 =
                                                                    3 /\
                                                                    to_int5
                                                                    segment_state7 =
                                                                    2)) /\
                                                                    (to_int
                                                                    signal_state10 =
                                                                    1 ->
                                                                    to_int5
                                                                    segment_state7 =
                                                                    3 /\
                                                                    to_int5
                                                                    segment_state6 =
                                                                    2)) /\
                                                                    (to_int
                                                                    signal_state13 =
                                                                    1 ->
                                                                    to_int5
                                                                    segment_state7 =
                                                                    4 /\
                                                                    to_int5
                                                                    segment_state8 =
                                                                    1)) /\
                                                                    (to_int
                                                                    signal_state8 =
                                                                    1 ->
                                                                    to_int5
                                                                    segment_state6 =
                                                                    1)) /\
                                                                    (to_int
                                                                    signal_state9 =
                                                                    1 ->
                                                                    to_int5
                                                                    segment_state6 =
                                                                    3)) /\
                                                                    (to_int
                                                                    signal_state14 =
                                                                    1 ->
                                                                    to_int5
                                                                    segment_state8 =
                                                                    2)) /\
                                                                    (to_int
                                                                    signal_state9 =
                                                                    1 ->
                                                                    to_int5
                                                                    segment_state8 =
                                                                    4)) /\
                                                                    ((to_int5
                                                                    segment_state =
                                                                    1 \/
                                                                    to_int5
                                                                    segment_state =
                                                                    2) \/
                                                                    to_int5
                                                                    segment_state =
                                                                    0 ->
                                                                    (to_int5
                                                                    segment_state6 =
                                                                    1 \/
                                                                    to_int5
                                                                    segment_state6 =
                                                                    2) \/
                                                                    to_int5
                                                                    segment_state6 =
                                                                    0)) /\
                                                                    ((to_int5
                                                                    segment_state1 =
                                                                    1 \/
                                                                    to_int5
                                                                    segment_state1 =
                                                                    2) \/
                                                                    to_int5
                                                                    segment_state1 =
                                                                    0 ->
                                                                    (to_int5
                                                                    segment_state7 =
                                                                    1 \/
                                                                    to_int5
                                                                    segment_state7 =
                                                                    2) \/
                                                                    to_int5
                                                                    segment_state7 =
                                                                    0)) /\
                                                                    ((to_int5
                                                                    segment_state2 =
                                                                    1 \/
                                                                    to_int5
                                                                    segment_state2 =
                                                                    2) \/
                                                                    to_int5
                                                                    segment_state2 =
                                                                    0 ->
                                                                    (to_int5
                                                                    segment_state8 =
                                                                    1 \/
                                                                    to_int5
                                                                    segment_state8 =
                                                                    2) \/
                                                                    to_int5
                                                                    segment_state8 =
                                                                    0)))))))
    else forall success1:bool.
          success1 = of_int6 0 ->
           ((((((((((to_int signal_state3 = 1 ->
                      to_int5 segment_state = 4 /\ to_int5 segment_state1 = 1) /\
                     (to_int signal_state4 = 1 ->
                       to_int5 segment_state2 = 3 /\
                        to_int5 segment_state1 = 2)) /\
                    (to_int signal_state2 = 1 ->
                      to_int5 segment_state1 = 3 /\ to_int5 segment_state = 2)) /\
                   (to_int signal_state5 = 1 ->
                     to_int5 segment_state1 = 4 /\ to_int5 segment_state2 = 1)) /\
                  (to_int signal_state = 1 -> to_int5 segment_state = 1)) /\
                 (to_int signal_state1 = 1 -> to_int5 segment_state = 3)) /\
                (to_int signal_state6 = 1 -> to_int5 segment_state2 = 2)) /\
               (to_int signal_state1 = 1 -> to_int5 segment_state2 = 4)) /\
              ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                to_int5 segment_state = 0 ->
                (to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                 to_int5 segment_state = 0)) /\
             ((to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
               to_int5 segment_state1 = 0 ->
               (to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
                to_int5 segment_state1 = 0)) /\
            ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
              to_int5 segment_state2 = 0 ->
              (to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
               to_int5 segment_state2 = 0)
    else if to_int4 route = 3 then if to_int5 segment_state2 = 0 &&
                                       to_int5 segment_state1 = 5 then 
    forall o1:one_segment_state.
     to_int5 o1 = 1 ->
      (forall segment_state3:one_segment_state, segment_state4:
        one_segment_state, segment_state5:one_segment_state.
        segment_state3 = segment_state /\
         segment_state4 = segment_state1 /\ segment_state5 = o1 ->
         (forall o2:one_segment_state.
           to_int5 o2 = 4 ->
            (forall segment_state6:one_segment_state, segment_state7:
              one_segment_state, segment_state8:one_segment_state.
              segment_state6 = segment_state3 /\
               segment_state7 = o2 /\ segment_state8 = segment_state5 ->
               (forall o3:one_signal_state.
                 to_int o3 = 1 ->
                  (forall signal_state8:one_signal_state, signal_state9:
                    one_signal_state, signal_state10:one_signal_state,
                    signal_state11:one_signal_state, signal_state12:
                    one_signal_state, signal_state13:one_signal_state,
                    signal_state14:one_signal_state, signal_state15:
                    one_signal_state.
                    signal_state8 = signal_state /\
                     signal_state9 = signal_state1 /\
                      signal_state10 = signal_state2 /\
                       signal_state11 = signal_state3 /\
                        signal_state12 = signal_state4 /\
                         signal_state13 = o3 /\
                          signal_state14 = signal_state6 /\
                           signal_state15 = signal_state7 ->
                     (forall success1:bool.
                       success1 = of_int6 1 ->
                        ((((((((((to_int signal_state11 = 1 ->
                                   to_int5 segment_state6 = 4 /\
                                    to_int5 segment_state7 = 1) /\
                                  (to_int signal_state12 = 1 ->
                                    to_int5 segment_state8 = 3 /\
                                     to_int5 segment_state7 = 2)) /\
                                 (to_int signal_state10 = 1 ->
                                   to_int5 segment_state7 = 3 /\
                                    to_int5 segment_state6 = 2)) /\
                                (to_int signal_state13 = 1 ->
                                  to_int5 segment_state7 = 4 /\
                                   to_int5 segment_state8 = 1)) /\
                               (to_int signal_state8 = 1 ->
                                 to_int5 segment_state6 = 1)) /\
                              (to_int signal_state9 = 1 ->
                                to_int5 segment_state6 = 3)) /\
                             (to_int signal_state14 = 1 ->
                               to_int5 segment_state8 = 2)) /\
                            (to_int signal_state9 = 1 ->
                              to_int5 segment_state8 = 4)) /\
                           ((to_int5 segment_state = 1 \/
                              to_int5 segment_state = 2) \/
                             to_int5 segment_state = 0 ->
                             (to_int5 segment_state6 = 1 \/
                               to_int5 segment_state6 = 2) \/
                              to_int5 segment_state6 = 0)) /\
                          ((to_int5 segment_state1 = 1 \/
                             to_int5 segment_state1 = 2) \/
                            to_int5 segment_state1 = 0 ->
                            (to_int5 segment_state7 = 1 \/
                              to_int5 segment_state7 = 2) \/
                             to_int5 segment_state7 = 0)) /\
                         ((to_int5 segment_state2 = 1 \/
                            to_int5 segment_state2 = 2) \/
                           to_int5 segment_state2 = 0 ->
                           (to_int5 segment_state8 = 1 \/
                             to_int5 segment_state8 = 2) \/
                            to_int5 segment_state8 = 0)))))))
    else forall success1:bool.
          success1 = of_int6 0 ->
           ((((((((((to_int signal_state3 = 1 ->
                      to_int5 segment_state = 4 /\ to_int5 segment_state1 = 1) /\
                     (to_int signal_state4 = 1 ->
                       to_int5 segment_state2 = 3 /\
                        to_int5 segment_state1 = 2)) /\
                    (to_int signal_state2 = 1 ->
                      to_int5 segment_state1 = 3 /\ to_int5 segment_state = 2)) /\
                   (to_int signal_state5 = 1 ->
                     to_int5 segment_state1 = 4 /\ to_int5 segment_state2 = 1)) /\
                  (to_int signal_state = 1 -> to_int5 segment_state = 1)) /\
                 (to_int signal_state1 = 1 -> to_int5 segment_state = 3)) /\
                (to_int signal_state6 = 1 -> to_int5 segment_state2 = 2)) /\
               (to_int signal_state1 = 1 -> to_int5 segment_state2 = 4)) /\
              ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                to_int5 segment_state = 0 ->
                (to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                 to_int5 segment_state = 0)) /\
             ((to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
               to_int5 segment_state1 = 0 ->
               (to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
                to_int5 segment_state1 = 0)) /\
            ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
              to_int5 segment_state2 = 0 ->
              (to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
               to_int5 segment_state2 = 0)
    else if to_int4 route = 1 then if to_int5 segment_state1 = 0 &&
                                       to_int5 segment_state = 5 then 
    forall o1:one_segment_state.
     to_int5 o1 = 1 ->
      (forall segment_state3:one_segment_state, segment_state4:
        one_segment_state, segment_state5:one_segment_state.
        segment_state3 = segment_state /\
         segment_state4 = o1 /\ segment_state5 = segment_state2 ->
         (forall o2:one_segment_state.
           to_int5 o2 = 4 ->
            (forall segment_state6:one_segment_state, segment_state7:
              one_segment_state, segment_state8:one_segment_state.
              segment_state6 = o2 /\
               segment_state7 = segment_state4 /\
                segment_state8 = segment_state5 ->
               (forall o3:one_signal_state.
                 to_int o3 = 1 ->
                  (forall signal_state8:one_signal_state, signal_state9:
                    one_signal_state, signal_state10:one_signal_state,
                    signal_state11:one_signal_state, signal_state12:
                    one_signal_state, signal_state13:one_signal_state,
                    signal_state14:one_signal_state, signal_state15:
                    one_signal_state.
                    signal_state8 = signal_state /\
                     signal_state9 = signal_state1 /\
                      signal_state10 = signal_state2 /\
                       signal_state11 = o3 /\
                        signal_state12 = signal_state4 /\
                         signal_state13 = signal_state5 /\
                          signal_state14 = signal_state6 /\
                           signal_state15 = signal_state7 ->
                     (forall success1:bool.
                       success1 = of_int6 1 ->
                        ((((((((((to_int signal_state11 = 1 ->
                                   to_int5 segment_state6 = 4 /\
                                    to_int5 segment_state7 = 1) /\
                                  (to_int signal_state12 = 1 ->
                                    to_int5 segment_state8 = 3 /\
                                     to_int5 segment_state7 = 2)) /\
                                 (to_int signal_state10 = 1 ->
                                   to_int5 segment_state7 = 3 /\
                                    to_int5 segment_state6 = 2)) /\
                                (to_int signal_state13 = 1 ->
                                  to_int5 segment_state7 = 4 /\
                                   to_int5 segment_state8 = 1)) /\
                               (to_int signal_state8 = 1 ->
                                 to_int5 segment_state6 = 1)) /\
                              (to_int signal_state9 = 1 ->
                                to_int5 segment_state6 = 3)) /\
                             (to_int signal_state14 = 1 ->
                               to_int5 segment_state8 = 2)) /\
                            (to_int signal_state9 = 1 ->
                              to_int5 segment_state8 = 4)) /\
                           ((to_int5 segment_state = 1 \/
                              to_int5 segment_state = 2) \/
                             to_int5 segment_state = 0 ->
                             (to_int5 segment_state6 = 1 \/
                               to_int5 segment_state6 = 2) \/
                              to_int5 segment_state6 = 0)) /\
                          ((to_int5 segment_state1 = 1 \/
                             to_int5 segment_state1 = 2) \/
                            to_int5 segment_state1 = 0 ->
                            (to_int5 segment_state7 = 1 \/
                              to_int5 segment_state7 = 2) \/
                             to_int5 segment_state7 = 0)) /\
                         ((to_int5 segment_state2 = 1 \/
                            to_int5 segment_state2 = 2) \/
                           to_int5 segment_state2 = 0 ->
                           (to_int5 segment_state8 = 1 \/
                             to_int5 segment_state8 = 2) \/
                            to_int5 segment_state8 = 0)))))))
    else forall success1:bool.
          success1 = of_int6 0 ->
           ((((((((((to_int signal_state3 = 1 ->
                      to_int5 segment_state = 4 /\ to_int5 segment_state1 = 1) /\
                     (to_int signal_state4 = 1 ->
                       to_int5 segment_state2 = 3 /\
                        to_int5 segment_state1 = 2)) /\
                    (to_int signal_state2 = 1 ->
                      to_int5 segment_state1 = 3 /\ to_int5 segment_state = 2)) /\
                   (to_int signal_state5 = 1 ->
                     to_int5 segment_state1 = 4 /\ to_int5 segment_state2 = 1)) /\
                  (to_int signal_state = 1 -> to_int5 segment_state = 1)) /\
                 (to_int signal_state1 = 1 -> to_int5 segment_state = 3)) /\
                (to_int signal_state6 = 1 -> to_int5 segment_state2 = 2)) /\
               (to_int signal_state1 = 1 -> to_int5 segment_state2 = 4)) /\
              ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                to_int5 segment_state = 0 ->
                (to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                 to_int5 segment_state = 0)) /\
             ((to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
               to_int5 segment_state1 = 0 ->
               (to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
                to_int5 segment_state1 = 0)) /\
            ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
              to_int5 segment_state2 = 0 ->
              (to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
               to_int5 segment_state2 = 0)
    else if to_int4 route = 2 then if to_int5 segment_state1 = 0 &&
                                       to_int5 segment_state2 = 5 then 
    forall o1:one_segment_state.
     to_int5 o1 = 2 ->
      (forall segment_state3:one_segment_state, segment_state4:
        one_segment_state, segment_state5:one_segment_state.
        segment_state3 = segment_state /\
         segment_state4 = o1 /\ segment_state5 = segment_state2 ->
         (forall o2:one_segment_state.
           to_int5 o2 = 3 ->
            (forall segment_state6:one_segment_state, segment_state7:
              one_segment_state, segment_state8:one_segment_state.
              segment_state6 = segment_state3 /\
               segment_state7 = segment_state4 /\ segment_state8 = o2 ->
               (forall o3:one_signal_state.
                 to_int o3 = 1 ->
                  (forall signal_state8:one_signal_state, signal_state9:
                    one_signal_state, signal_state10:one_signal_state,
                    signal_state11:one_signal_state, signal_state12:
                    one_signal_state, signal_state13:one_signal_state,
                    signal_state14:one_signal_state, signal_state15:
                    one_signal_state.
                    signal_state8 = signal_state /\
                     signal_state9 = signal_state1 /\
                      signal_state10 = signal_state2 /\
                       signal_state11 = signal_state3 /\
                        signal_state12 = o3 /\
                         signal_state13 = signal_state5 /\
                          signal_state14 = signal_state6 /\
                           signal_state15 = signal_state7 ->
                     (forall success1:bool.
                       success1 = of_int6 1 ->
                        ((((((((((to_int signal_state11 = 1 ->
                                   to_int5 segment_state6 = 4 /\
                                    to_int5 segment_state7 = 1) /\
                                  (to_int signal_state12 = 1 ->
                                    to_int5 segment_state8 = 3 /\
                                     to_int5 segment_state7 = 2)) /\
                                 (to_int signal_state10 = 1 ->
                                   to_int5 segment_state7 = 3 /\
                                    to_int5 segment_state6 = 2)) /\
                                (to_int signal_state13 = 1 ->
                                  to_int5 segment_state7 = 4 /\
                                   to_int5 segment_state8 = 1)) /\
                               (to_int signal_state8 = 1 ->
                                 to_int5 segment_state6 = 1)) /\
                              (to_int signal_state9 = 1 ->
                                to_int5 segment_state6 = 3)) /\
                             (to_int signal_state14 = 1 ->
                               to_int5 segment_state8 = 2)) /\
                            (to_int signal_state9 = 1 ->
                              to_int5 segment_state8 = 4)) /\
                           ((to_int5 segment_state = 1 \/
                              to_int5 segment_state = 2) \/
                             to_int5 segment_state = 0 ->
                             (to_int5 segment_state6 = 1 \/
                               to_int5 segment_state6 = 2) \/
                              to_int5 segment_state6 = 0)) /\
                          ((to_int5 segment_state1 = 1 \/
                             to_int5 segment_state1 = 2) \/
                            to_int5 segment_state1 = 0 ->
                            (to_int5 segment_state7 = 1 \/
                              to_int5 segment_state7 = 2) \/
                             to_int5 segment_state7 = 0)) /\
                         ((to_int5 segment_state2 = 1 \/
                            to_int5 segment_state2 = 2) \/
                           to_int5 segment_state2 = 0 ->
                           (to_int5 segment_state8 = 1 \/
                             to_int5 segment_state8 = 2) \/
                            to_int5 segment_state8 = 0)))))))
    else forall success1:bool.
          success1 = of_int6 0 ->
           ((((((((((to_int signal_state3 = 1 ->
                      to_int5 segment_state = 4 /\ to_int5 segment_state1 = 1) /\
                     (to_int signal_state4 = 1 ->
                       to_int5 segment_state2 = 3 /\
                        to_int5 segment_state1 = 2)) /\
                    (to_int signal_state2 = 1 ->
                      to_int5 segment_state1 = 3 /\ to_int5 segment_state = 2)) /\
                   (to_int signal_state5 = 1 ->
                     to_int5 segment_state1 = 4 /\ to_int5 segment_state2 = 1)) /\
                  (to_int signal_state = 1 -> to_int5 segment_state = 1)) /\
                 (to_int signal_state1 = 1 -> to_int5 segment_state = 3)) /\
                (to_int signal_state6 = 1 -> to_int5 segment_state2 = 2)) /\
               (to_int signal_state1 = 1 -> to_int5 segment_state2 = 4)) /\
              ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                to_int5 segment_state = 0 ->
                (to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                 to_int5 segment_state = 0)) /\
             ((to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
               to_int5 segment_state1 = 0 ->
               (to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
                to_int5 segment_state1 = 0)) /\
            ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
              to_int5 segment_state2 = 0 ->
              (to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
               to_int5 segment_state2 = 0)
    else if to_int4 route = 5 then if to_int5 segment_state = 5 then 
    forall o1:one_segment_state.
     to_int5 o1 = 3 ->
      (forall segment_state3:one_segment_state, segment_state4:
        one_segment_state, segment_state5:one_segment_state.
        segment_state3 = o1 /\
         segment_state4 = segment_state1 /\ segment_state5 = segment_state2 ->
         (forall o2:one_signal_state.
           to_int o2 = 1 ->
            (forall signal_state8:one_signal_state, signal_state9:
              one_signal_state, signal_state10:one_signal_state,
              signal_state11:one_signal_state, signal_state12:
              one_signal_state, signal_state13:one_signal_state,
              signal_state14:one_signal_state, signal_state15:
              one_signal_state.
              signal_state8 = signal_state /\
               signal_state9 = o2 /\
                signal_state10 = signal_state2 /\
                 signal_state11 = signal_state3 /\
                  signal_state12 = signal_state4 /\
                   signal_state13 = signal_state5 /\
                    signal_state14 = signal_state6 /\
                     signal_state15 = signal_state7 ->
               (forall success1:bool.
                 success1 = of_int6 1 ->
                  ((((((((((to_int signal_state11 = 1 ->
                             to_int5 segment_state3 = 4 /\
                              to_int5 segment_state4 = 1) /\
                            (to_int signal_state12 = 1 ->
                              to_int5 segment_state5 = 3 /\
                               to_int5 segment_state4 = 2)) /\
                           (to_int signal_state10 = 1 ->
                             to_int5 segment_state4 = 3 /\
                              to_int5 segment_state3 = 2)) /\
                          (to_int signal_state13 = 1 ->
                            to_int5 segment_state4 = 4 /\
                             to_int5 segment_state5 = 1)) /\
                         (to_int signal_state8 = 1 ->
                           to_int5 segment_state3 = 1)) /\
                        (to_int signal_state9 = 1 ->
                          to_int5 segment_state3 = 3)) /\
                       (to_int signal_state14 = 1 ->
                         to_int5 segment_state5 = 2)) /\
                      (to_int signal_state9 = 1 -> to_int5 segment_state5 = 4)) /\
                     ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                       to_int5 segment_state = 0 ->
                       (to_int5 segment_state3 = 1 \/
                         to_int5 segment_state3 = 2) \/
                        to_int5 segment_state3 = 0)) /\
                    ((to_int5 segment_state1 = 1 \/
                       to_int5 segment_state1 = 2) \/
                      to_int5 segment_state1 = 0 ->
                      (to_int5 segment_state4 = 1 \/
                        to_int5 segment_state4 = 2) \/
                       to_int5 segment_state4 = 0)) /\
                   ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
                     to_int5 segment_state2 = 0 ->
                     (to_int5 segment_state5 = 1 \/
                       to_int5 segment_state5 = 2) \/
                      to_int5 segment_state5 = 0)))))
    else forall success1:bool.
          success1 = of_int6 0 ->
           ((((((((((to_int signal_state3 = 1 ->
                      to_int5 segment_state = 4 /\ to_int5 segment_state1 = 1) /\
                     (to_int signal_state4 = 1 ->
                       to_int5 segment_state2 = 3 /\
                        to_int5 segment_state1 = 2)) /\
                    (to_int signal_state2 = 1 ->
                      to_int5 segment_state1 = 3 /\ to_int5 segment_state = 2)) /\
                   (to_int signal_state5 = 1 ->
                     to_int5 segment_state1 = 4 /\ to_int5 segment_state2 = 1)) /\
                  (to_int signal_state = 1 -> to_int5 segment_state = 1)) /\
                 (to_int signal_state1 = 1 -> to_int5 segment_state = 3)) /\
                (to_int signal_state6 = 1 -> to_int5 segment_state2 = 2)) /\
               (to_int signal_state1 = 1 -> to_int5 segment_state2 = 4)) /\
              ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                to_int5 segment_state = 0 ->
                (to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                 to_int5 segment_state = 0)) /\
             ((to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
               to_int5 segment_state1 = 0 ->
               (to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
                to_int5 segment_state1 = 0)) /\
            ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
              to_int5 segment_state2 = 0 ->
              (to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
               to_int5 segment_state2 = 0)
    else if to_int4 route = 7 then if to_int5 segment_state2 = 5 then 
    forall o1:one_segment_state.
     to_int5 o1 = 4 ->
      (forall segment_state3:one_segment_state, segment_state4:
        one_segment_state, segment_state5:one_segment_state.
        segment_state3 = segment_state /\
         segment_state4 = segment_state1 /\ segment_state5 = o1 ->
         (forall o2:one_signal_state.
           to_int o2 = 1 ->
            (forall signal_state8:one_signal_state, signal_state9:
              one_signal_state, signal_state10:one_signal_state,
              signal_state11:one_signal_state, signal_state12:
              one_signal_state, signal_state13:one_signal_state,
              signal_state14:one_signal_state, signal_state15:
              one_signal_state.
              signal_state8 = signal_state /\
               signal_state9 = signal_state1 /\
                signal_state10 = signal_state2 /\
                 signal_state11 = signal_state3 /\
                  signal_state12 = signal_state4 /\
                   signal_state13 = signal_state5 /\
                    signal_state14 = signal_state6 /\ signal_state15 = o2 ->
               (forall success1:bool.
                 success1 = of_int6 1 ->
                  ((((((((((to_int signal_state11 = 1 ->
                             to_int5 segment_state3 = 4 /\
                              to_int5 segment_state4 = 1) /\
                            (to_int signal_state12 = 1 ->
                              to_int5 segment_state5 = 3 /\
                               to_int5 segment_state4 = 2)) /\
                           (to_int signal_state10 = 1 ->
                             to_int5 segment_state4 = 3 /\
                              to_int5 segment_state3 = 2)) /\
                          (to_int signal_state13 = 1 ->
                            to_int5 segment_state4 = 4 /\
                             to_int5 segment_state5 = 1)) /\
                         (to_int signal_state8 = 1 ->
                           to_int5 segment_state3 = 1)) /\
                        (to_int signal_state9 = 1 ->
                          to_int5 segment_state3 = 3)) /\
                       (to_int signal_state14 = 1 ->
                         to_int5 segment_state5 = 2)) /\
                      (to_int signal_state9 = 1 -> to_int5 segment_state5 = 4)) /\
                     ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                       to_int5 segment_state = 0 ->
                       (to_int5 segment_state3 = 1 \/
                         to_int5 segment_state3 = 2) \/
                        to_int5 segment_state3 = 0)) /\
                    ((to_int5 segment_state1 = 1 \/
                       to_int5 segment_state1 = 2) \/
                      to_int5 segment_state1 = 0 ->
                      (to_int5 segment_state4 = 1 \/
                        to_int5 segment_state4 = 2) \/
                       to_int5 segment_state4 = 0)) /\
                   ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
                     to_int5 segment_state2 = 0 ->
                     (to_int5 segment_state5 = 1 \/
                       to_int5 segment_state5 = 2) \/
                      to_int5 segment_state5 = 0)))))
    else forall success1:bool.
          success1 = of_int6 0 ->
           ((((((((((to_int signal_state3 = 1 ->
                      to_int5 segment_state = 4 /\ to_int5 segment_state1 = 1) /\
                     (to_int signal_state4 = 1 ->
                       to_int5 segment_state2 = 3 /\
                        to_int5 segment_state1 = 2)) /\
                    (to_int signal_state2 = 1 ->
                      to_int5 segment_state1 = 3 /\ to_int5 segment_state = 2)) /\
                   (to_int signal_state5 = 1 ->
                     to_int5 segment_state1 = 4 /\ to_int5 segment_state2 = 1)) /\
                  (to_int signal_state = 1 -> to_int5 segment_state = 1)) /\
                 (to_int signal_state1 = 1 -> to_int5 segment_state = 3)) /\
                (to_int signal_state6 = 1 -> to_int5 segment_state2 = 2)) /\
               (to_int signal_state1 = 1 -> to_int5 segment_state2 = 4)) /\
              ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                to_int5 segment_state = 0 ->
                (to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                 to_int5 segment_state = 0)) /\
             ((to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
               to_int5 segment_state1 = 0 ->
               (to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
                to_int5 segment_state1 = 0)) /\
            ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
              to_int5 segment_state2 = 0 ->
              (to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
               to_int5 segment_state2 = 0)
    else if to_int4 route = 4 then if to_int5 segment_state = 0 then 
    forall o1:one_segment_state.
     to_int5 o1 = 1 ->
      (forall segment_state3:one_segment_state, segment_state4:
        one_segment_state, segment_state5:one_segment_state.
        segment_state3 = o1 /\
         segment_state4 = segment_state1 /\ segment_state5 = segment_state2 ->
         (forall o2:one_signal_state.
           to_int o2 = 1 ->
            (forall signal_state8:one_signal_state, signal_state9:
              one_signal_state, signal_state10:one_signal_state,
              signal_state11:one_signal_state, signal_state12:
              one_signal_state, signal_state13:one_signal_state,
              signal_state14:one_signal_state, signal_state15:
              one_signal_state.
              signal_state8 = o2 /\
               signal_state9 = signal_state1 /\
                signal_state10 = signal_state2 /\
                 signal_state11 = signal_state3 /\
                  signal_state12 = signal_state4 /\
                   signal_state13 = signal_state5 /\
                    signal_state14 = signal_state6 /\
                     signal_state15 = signal_state7 ->
               (forall success1:bool.
                 success1 = of_int6 1 ->
                  ((((((((((to_int signal_state11 = 1 ->
                             to_int5 segment_state3 = 4 /\
                              to_int5 segment_state4 = 1) /\
                            (to_int signal_state12 = 1 ->
                              to_int5 segment_state5 = 3 /\
                               to_int5 segment_state4 = 2)) /\
                           (to_int signal_state10 = 1 ->
                             to_int5 segment_state4 = 3 /\
                              to_int5 segment_state3 = 2)) /\
                          (to_int signal_state13 = 1 ->
                            to_int5 segment_state4 = 4 /\
                             to_int5 segment_state5 = 1)) /\
                         (to_int signal_state8 = 1 ->
                           to_int5 segment_state3 = 1)) /\
                        (to_int signal_state9 = 1 ->
                          to_int5 segment_state3 = 3)) /\
                       (to_int signal_state14 = 1 ->
                         to_int5 segment_state5 = 2)) /\
                      (to_int signal_state9 = 1 -> to_int5 segment_state5 = 4)) /\
                     ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                       to_int5 segment_state = 0 ->
                       (to_int5 segment_state3 = 1 \/
                         to_int5 segment_state3 = 2) \/
                        to_int5 segment_state3 = 0)) /\
                    ((to_int5 segment_state1 = 1 \/
                       to_int5 segment_state1 = 2) \/
                      to_int5 segment_state1 = 0 ->
                      (to_int5 segment_state4 = 1 \/
                        to_int5 segment_state4 = 2) \/
                       to_int5 segment_state4 = 0)) /\
                   ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
                     to_int5 segment_state2 = 0 ->
                     (to_int5 segment_state5 = 1 \/
                       to_int5 segment_state5 = 2) \/
                      to_int5 segment_state5 = 0)))))
    else forall success1:bool.
          success1 = of_int6 0 ->
           ((((((((((to_int signal_state3 = 1 ->
                      to_int5 segment_state = 4 /\ to_int5 segment_state1 = 1) /\
                     (to_int signal_state4 = 1 ->
                       to_int5 segment_state2 = 3 /\
                        to_int5 segment_state1 = 2)) /\
                    (to_int signal_state2 = 1 ->
                      to_int5 segment_state1 = 3 /\ to_int5 segment_state = 2)) /\
                   (to_int signal_state5 = 1 ->
                     to_int5 segment_state1 = 4 /\ to_int5 segment_state2 = 1)) /\
                  (to_int signal_state = 1 -> to_int5 segment_state = 1)) /\
                 (to_int signal_state1 = 1 -> to_int5 segment_state = 3)) /\
                (to_int signal_state6 = 1 -> to_int5 segment_state2 = 2)) /\
               (to_int signal_state1 = 1 -> to_int5 segment_state2 = 4)) /\
              ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                to_int5 segment_state = 0 ->
                (to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                 to_int5 segment_state = 0)) /\
             ((to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
               to_int5 segment_state1 = 0 ->
               (to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
                to_int5 segment_state1 = 0)) /\
            ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
              to_int5 segment_state2 = 0 ->
              (to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
               to_int5 segment_state2 = 0)
    else if to_int4 route = 6 then if to_int5 segment_state2 = 0 then 
    forall o1:one_segment_state.
     to_int5 o1 = 2 ->
      (forall segment_state3:one_segment_state, segment_state4:
        one_segment_state, segment_state5:one_segment_state.
        segment_state3 = segment_state /\
         segment_state4 = segment_state1 /\ segment_state5 = o1 ->
         (forall o2:one_signal_state.
           to_int o2 = 1 ->
            (forall signal_state8:one_signal_state, signal_state9:
              one_signal_state, signal_state10:one_signal_state,
              signal_state11:one_signal_state, signal_state12:
              one_signal_state, signal_state13:one_signal_state,
              signal_state14:one_signal_state, signal_state15:
              one_signal_state.
              signal_state8 = signal_state /\
               signal_state9 = signal_state1 /\
                signal_state10 = signal_state2 /\
                 signal_state11 = signal_state3 /\
                  signal_state12 = signal_state4 /\
                   signal_state13 = signal_state5 /\
                    signal_state14 = o2 /\ signal_state15 = signal_state7 ->
               (forall success1:bool.
                 success1 = of_int6 1 ->
                  ((((((((((to_int signal_state11 = 1 ->
                             to_int5 segment_state3 = 4 /\
                              to_int5 segment_state4 = 1) /\
                            (to_int signal_state12 = 1 ->
                              to_int5 segment_state5 = 3 /\
                               to_int5 segment_state4 = 2)) /\
                           (to_int signal_state10 = 1 ->
                             to_int5 segment_state4 = 3 /\
                              to_int5 segment_state3 = 2)) /\
                          (to_int signal_state13 = 1 ->
                            to_int5 segment_state4 = 4 /\
                             to_int5 segment_state5 = 1)) /\
                         (to_int signal_state8 = 1 ->
                           to_int5 segment_state3 = 1)) /\
                        (to_int signal_state9 = 1 ->
                          to_int5 segment_state3 = 3)) /\
                       (to_int signal_state14 = 1 ->
                         to_int5 segment_state5 = 2)) /\
                      (to_int signal_state9 = 1 -> to_int5 segment_state5 = 4)) /\
                     ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                       to_int5 segment_state = 0 ->
                       (to_int5 segment_state3 = 1 \/
                         to_int5 segment_state3 = 2) \/
                        to_int5 segment_state3 = 0)) /\
                    ((to_int5 segment_state1 = 1 \/
                       to_int5 segment_state1 = 2) \/
                      to_int5 segment_state1 = 0 ->
                      (to_int5 segment_state4 = 1 \/
                        to_int5 segment_state4 = 2) \/
                       to_int5 segment_state4 = 0)) /\
                   ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
                     to_int5 segment_state2 = 0 ->
                     (to_int5 segment_state5 = 1 \/
                       to_int5 segment_state5 = 2) \/
                      to_int5 segment_state5 = 0)))))
    else forall success1:bool.
          success1 = of_int6 0 ->
           ((((((((((to_int signal_state3 = 1 ->
                      to_int5 segment_state = 4 /\ to_int5 segment_state1 = 1) /\
                     (to_int signal_state4 = 1 ->
                       to_int5 segment_state2 = 3 /\
                        to_int5 segment_state1 = 2)) /\
                    (to_int signal_state2 = 1 ->
                      to_int5 segment_state1 = 3 /\ to_int5 segment_state = 2)) /\
                   (to_int signal_state5 = 1 ->
                     to_int5 segment_state1 = 4 /\ to_int5 segment_state2 = 1)) /\
                  (to_int signal_state = 1 -> to_int5 segment_state = 1)) /\
                 (to_int signal_state1 = 1 -> to_int5 segment_state = 3)) /\
                (to_int signal_state6 = 1 -> to_int5 segment_state2 = 2)) /\
               (to_int signal_state1 = 1 -> to_int5 segment_state2 = 4)) /\
              ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                to_int5 segment_state = 0 ->
                (to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
                 to_int5 segment_state = 0)) /\
             ((to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
               to_int5 segment_state1 = 0 ->
               (to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
                to_int5 segment_state1 = 0)) /\
            ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
              to_int5 segment_state2 = 0 ->
              (to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
               to_int5 segment_state2 = 0)
    else ((((((((((to_int signal_state3 = 1 ->
                    to_int5 segment_state = 4 /\ to_int5 segment_state1 = 1) /\
                   (to_int signal_state4 = 1 ->
                     to_int5 segment_state2 = 3 /\ to_int5 segment_state1 = 2)) /\
                  (to_int signal_state2 = 1 ->
                    to_int5 segment_state1 = 3 /\ to_int5 segment_state = 2)) /\
                 (to_int signal_state5 = 1 ->
                   to_int5 segment_state1 = 4 /\ to_int5 segment_state2 = 1)) /\
                (to_int signal_state = 1 -> to_int5 segment_state = 1)) /\
               (to_int signal_state1 = 1 -> to_int5 segment_state = 3)) /\
              (to_int signal_state6 = 1 -> to_int5 segment_state2 = 2)) /\
             (to_int signal_state1 = 1 -> to_int5 segment_state2 = 4)) /\
            ((to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
              to_int5 segment_state = 0 ->
              (to_int5 segment_state = 1 \/ to_int5 segment_state = 2) \/
               to_int5 segment_state = 0)) /\
           ((to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
             to_int5 segment_state1 = 0 ->
             (to_int5 segment_state1 = 1 \/ to_int5 segment_state1 = 2) \/
              to_int5 segment_state1 = 0)) /\
          ((to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
            to_int5 segment_state2 = 0 ->
            (to_int5 segment_state2 = 1 \/ to_int5 segment_state2 = 2) \/
             to_int5 segment_state2 = 0)
end
